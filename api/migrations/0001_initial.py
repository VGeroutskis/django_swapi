# Generated by Django 5.2.4 on 2025-07-21 18:06

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Climates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Climate',
                'verbose_name_plural': 'Climates',
                'db_table': 'static_climates',
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='EyeColors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('color', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Eye Color',
                'verbose_name_plural': 'Eye Colors',
                'db_table': 'static_eye_colors',
                'ordering': ['color'],
            },
        ),
        migrations.CreateModel(
            name='Films',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('title', models.CharField(db_comment='The title of this film', help_text='The title of this film', max_length=255)),
                ('episode_id', models.IntegerField(db_comment='The episode number of this film.', help_text='The episode number of this film.')),
                ('opening_crawl', models.TextField(db_comment='The opening paragraphs at the beginning of this film.', help_text='The opening paragraphs at the beginning of this film.')),
                ('director', models.CharField(db_comment='The name of the director of this film.', help_text='The name of the director of this film.', max_length=255)),
                ('producer', models.CharField(db_comment='The name(s) of the producer(s) of this film. Comma separated.', help_text='The name(s) of the producer(s) of this film. Comma separated.', max_length=255)),
                ('release_date', models.DateField(db_comment='The ISO 8601 date format of film release at original creator country.', help_text='The ISO 8601 date format of film release at original creator country.')),
            ],
            options={
                'verbose_name': 'Film',
                'verbose_name_plural': 'Films',
                'db_table': 'api_films',
                'ordering': ['episode_id', 'title'],
            },
        ),
        migrations.CreateModel(
            name='HairColors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('color', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Hair Color',
                'verbose_name_plural': 'Hair Colors',
                'db_table': 'static_hair_colors',
                'ordering': ['color'],
            },
        ),
        migrations.CreateModel(
            name='SkinColors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('color', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Skin Color',
                'verbose_name_plural': 'Skin Colors',
                'db_table': 'static_skin_colors',
                'ordering': ['color'],
            },
        ),
        migrations.CreateModel(
            name='StarshipClasses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Starship Class',
                'verbose_name_plural': 'Starship Classes',
                'db_table': 'static_starship_classes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StarshipManufacturers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Starship Manufacturer',
                'verbose_name_plural': 'Starship Manufacturers',
                'db_table': 'static_starship_manufacturers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Terrains',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Terrain',
                'verbose_name_plural': 'Terrains',
                'db_table': 'static_terrains',
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='VehicleClasses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Vehicle Class',
                'verbose_name_plural': 'Vehicle Classes',
                'db_table': 'static_vehicle_classes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VehicleManufacturers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Vehicle Manufacturer',
                'verbose_name_plural': 'Vehicle Manufacturers',
                'db_table': 'static_vehicle_manufacturers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Planets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_comment='The name of this planet.', db_index=True, help_text='The name of this planet.', max_length=255)),
                ('rotation_period', models.CharField(db_comment='The number of standard hours it takes for this planet to complete a single rotation on its axis.', default='0', help_text='The number of standard hours it takes for this planet to complete a single rotation on its axis.', max_length=50)),
                ('orbital_period', models.CharField(db_comment='The number of standard days it takes for this planet to complete a single orbit of its local star.', default='0', help_text='The number of standard days it takes for this planet to complete a single orbit of its local star.', max_length=50)),
                ('diameter', models.CharField(db_comment='The diameter of this planet in kilometers.', default='0', help_text='The diameter of this planet in kilometers.', max_length=50)),
                ('gravity', models.CharField(db_comment="A number denoting the gravity of this planet, where '1' is normal or 1 standard G. '2' is twice or 2 standard Gs. '0.5' is half or 0.5 standard Gs.", default='1', help_text="A number denoting the gravity of this planet, where '1' is normal or 1 standard G. '2' is twice or 2 standard Gs. '0.5' is half or 0.5 standard Gs.", max_length=255)),
                ('population', models.CharField(db_comment='The average population of sentient beings inhabiting this planet.', default='0', help_text='The average population of sentient beings inhabiting this planet.', max_length=255)),
                ('surface_water', models.CharField(db_comment='The percentage of the planet surface that is naturally occurring water or bodies of water.', default='0', help_text='The percentage of the planet surface that is naturally occurring water or bodies of water.', max_length=255)),
                ('climate', models.ForeignKey(blank=True, db_comment='The climate of this planet', help_text='The climate of this planet', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='planets', to='api.climates')),
                ('terrain', models.ForeignKey(blank=True, db_comment='The terrain of this planet', help_text='The terrain of this planet', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='planets', to='api.terrains')),
            ],
            options={
                'verbose_name': 'Planet',
                'verbose_name_plural': 'Planets',
                'db_table': 'api_planets',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_comment='The name of this person.', help_text='The name of this person.', max_length=255)),
                ('birth_year', models.CharField(db_comment='The birth year of the person, using the in-universe standard of BBY or ABY.', help_text='The birth year of the person, using the in-universe standard of BBY or ABY.', max_length=50)),
                ('gender', models.CharField(db_comment="The gender of this person. Either 'Male', 'Female' or 'unknown', 'n/a'.", help_text="The gender of this person. Either 'Male', 'Female' or 'unknown', 'n/a'.", max_length=50)),
                ('height', models.CharField(db_comment='The height of the person in centimeters.', help_text='The height of the person in centimeters.', max_length=50)),
                ('mass', models.CharField(db_comment='The mass of the person in kilograms.', help_text='The mass of the person in kilograms.', max_length=50)),
                ('homeworld', models.ForeignKey(blank=True, db_comment='The planet that this person was born on or inhabits.', help_text='The planet that this person was born on or inhabits.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='residents', to='api.planets')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
                'db_table': 'api_people',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_comment='The name of this species.', help_text='The name of this species.', max_length=255)),
                ('classification', models.CharField(db_comment="The classification of this species, such as 'mammal' or 'reptile'.", help_text="The classification of this species, such as 'mammal' or 'reptile'.", max_length=255)),
                ('designation', models.CharField(db_comment="The designation of this species, such as 'sentient'.", help_text="The designation of this species, such as 'sentient'.", max_length=255)),
                ('average_height', models.CharField(db_comment='The average height of this species in centimeters.', help_text='The average height of this species in centimeters.', max_length=50)),
                ('average_lifespan', models.CharField(db_comment='The average lifespan of this species in years.', help_text='The average lifespan of this species in years.', max_length=50)),
                ('language', models.CharField(db_comment='The language commonly spoken by this species.', help_text='The language commonly spoken by this species.', max_length=255)),
                ('homeworld', models.ForeignKey(blank=True, db_comment='The planet that this species originates from.', help_text='The planet that this species originates from.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='native_species', to='api.planets')),
            ],
            options={
                'verbose_name': 'Species',
                'verbose_name_plural': 'Species',
                'db_table': 'api_species',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Starships',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_comment="The name of this starship. The common name, such as 'Death Star'.", help_text="The name of this starship. The common name, such as 'Death Star'.", max_length=255)),
                ('model', models.CharField(db_comment="The model or official name of this starship. Such as 'T-65 X-wing' or 'DS-1 Orbital Battle Station'.", help_text="The model or official name of this starship. Such as 'T-65 X-wing' or 'DS-1 Orbital Battle Station'.", max_length=255)),
                ('cost_in_credits', models.CharField(db_comment='The cost of this starship new, in galactic credits.', help_text='The cost of this starship new, in galactic credits.', max_length=50)),
                ('length', models.CharField(db_comment='The length of this starship in meters.', help_text='The length of this starship in meters.', max_length=50)),
                ('crew', models.CharField(db_comment='The number of personnel needed to run or pilot this starship.', help_text='The number of personnel needed to run or pilot this starship.', max_length=50)),
                ('passengers', models.CharField(db_comment='The number of non-essential people this starship can transport.', help_text='The number of non-essential people this starship can transport.', max_length=50)),
                ('max_atmosphering_speed', models.CharField(db_comment='The maximum speed of this starship in the atmosphere.', help_text='The maximum speed of this starship in the atmosphere.', max_length=50)),
                ('hyperdrive_rating', models.CharField(db_comment='The class of this starships hyperdrive.', help_text='The class of this starships hyperdrive.', max_length=50)),
                ('MGLT', models.CharField(db_comment='The Maximum number of Megalights this starship can travel in a standard hour.', help_text='The Maximum number of Megalights this starship can travel in a standard hour.', max_length=50)),
                ('cargo_capacity', models.CharField(db_comment='The maximum number of kilograms that this starship can transport.', help_text='The maximum number of kilograms that this starship can transport.', max_length=50)),
                ('consumables', models.CharField(db_comment='The maximum length of time that this starship can provide consumables for its entire crew without having to resupply.', help_text='The maximum length of time that this starship can provide consumables for its entire crew without having to resupply.', max_length=255)),
                ('starship_class', models.ForeignKey(db_comment="The class of this starship, such as 'Starfighter' or 'Deep Space Mobile Battlestation'", help_text="The class of this starship, such as 'Starfighter' or 'Deep Space Mobile Battlestation'", on_delete=django.db.models.deletion.CASCADE, related_name='starships', to='api.starshipclasses')),
            ],
            options={
                'verbose_name': 'Starship',
                'verbose_name_plural': 'Starships',
                'db_table': 'api_starships',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vehicles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('name', models.CharField(db_comment="The name of this vehicle. The common name, such as 'Sand Crawler' or 'Speeder bike'.", help_text="The name of this vehicle. The common name, such as 'Sand Crawler' or 'Speeder bike'.", max_length=255)),
                ('model', models.CharField(db_comment="The model or official name of this vehicle. Such as 'All-Terrain Attack Transport'.", help_text="The model or official name of this vehicle. Such as 'All-Terrain Attack Transport'.", max_length=255)),
                ('length', models.CharField(db_comment='The length of this vehicle in meters.', help_text='The length of this vehicle in meters.', max_length=50)),
                ('cost_in_credits', models.CharField(db_comment='The cost of this vehicle new, in Galactic Credits.', help_text='The cost of this vehicle new, in Galactic Credits.', max_length=50)),
                ('crew', models.CharField(db_comment='The number of personnel needed to run or pilot this vehicle.', help_text='The number of personnel needed to run or pilot this vehicle.', max_length=50)),
                ('passengers', models.CharField(db_comment='The number of non-essential people this vehicle can transport.', help_text='The number of non-essential people this vehicle can transport.', max_length=50)),
                ('max_atmosphering_speed', models.CharField(db_comment='The maximum speed of this vehicle in the atmosphere.', help_text='The maximum speed of this vehicle in the atmosphere.', max_length=50)),
                ('cargo_capacity', models.CharField(db_comment='The maximum number of kilograms that this vehicle can transport.', help_text='The maximum number of kilograms that this vehicle can transport.', max_length=50)),
                ('consumables', models.CharField(db_comment='The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply.', help_text='The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply.', max_length=255)),
                ('vehicle_class', models.ForeignKey(db_comment="The class of this vehicle, such as 'Wheeled' or 'Repulsorcraft'.", help_text="The class of this vehicle, such as 'Wheeled' or 'Repulsorcraft'.", on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='api.vehicleclasses')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'db_table': 'api_vehicles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PeopleEyeColors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('eye_color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eye_color_people', to='api.eyecolors')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='people_eye_colors', to='api.people')),
            ],
            options={
                'verbose_name': 'People Eye Color',
                'verbose_name_plural': 'People Eye Colors',
                'db_table': 'relation_people_eye_colors',
                'ordering': ['person__name', 'eye_color__color'],
                'unique_together': {('person', 'eye_color')},
            },
        ),
        migrations.CreateModel(
            name='PeopleFilms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_people', to='api.films')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='people_films', to='api.people')),
            ],
            options={
                'verbose_name': 'People Film',
                'verbose_name_plural': 'People Films',
                'db_table': 'relation_people_films',
                'ordering': ['film__episode_id', 'person__name'],
                'unique_together': {('person', 'film')},
            },
        ),
        migrations.CreateModel(
            name='PeopleHairColors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('hair_color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hair_color_people', to='api.haircolors')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='people_hair_colors', to='api.people')),
            ],
            options={
                'verbose_name': 'People Hair Color',
                'verbose_name_plural': 'People Hair Colors',
                'db_table': 'relation_people_hair_colors',
                'ordering': ['person__name', 'hair_color__color'],
                'unique_together': {('person', 'hair_color')},
            },
        ),
        migrations.CreateModel(
            name='PlanetFilms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_planets', to='api.films')),
                ('planet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planet_films', to='api.planets')),
            ],
            options={
                'verbose_name': 'Planet Film',
                'verbose_name_plural': 'Planet Films',
                'db_table': 'relation_planet_films',
                'ordering': ['film__episode_id', 'planet__name'],
                'unique_together': {('planet', 'film')},
            },
        ),
        migrations.CreateModel(
            name='PeopleSkinColors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='people_skin_colors', to='api.people')),
                ('skin_color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skin_color_people', to='api.skincolors')),
            ],
            options={
                'verbose_name': 'People Skin Color',
                'verbose_name_plural': 'People Skin Colors',
                'db_table': 'relation_people_skin_colors',
                'ordering': ['person__name', 'skin_color__color'],
                'unique_together': {('person', 'skin_color')},
            },
        ),
        migrations.CreateModel(
            name='PeopleSpecies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='people_species', to='api.people')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species_people', to='api.species')),
            ],
            options={
                'verbose_name': 'People Species',
                'verbose_name_plural': 'People Species',
                'db_table': 'relation_people_species',
                'ordering': ['person__name', 'species__name'],
                'unique_together': {('person', 'species')},
            },
        ),
        migrations.CreateModel(
            name='SpeciesEyeColors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('eye_color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eye_color_species', to='api.eyecolors')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species_eye_colors', to='api.species')),
            ],
            options={
                'verbose_name': 'Species Eye Color',
                'verbose_name_plural': 'Species Eye Colors',
                'db_table': 'relation_species_eye_colors',
                'ordering': ['species__name', 'eye_color__color'],
                'unique_together': {('species', 'eye_color')},
            },
        ),
        migrations.CreateModel(
            name='SpeciesFilms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_species', to='api.films')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species_films', to='api.species')),
            ],
            options={
                'verbose_name': 'Species Film',
                'verbose_name_plural': 'Species Films',
                'db_table': 'relation_species_films',
                'ordering': ['film__episode_id', 'species__name'],
                'unique_together': {('species', 'film')},
            },
        ),
        migrations.CreateModel(
            name='SpeciesHairColors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('hair_color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hair_color_species', to='api.haircolors')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species_hair_colors', to='api.species')),
            ],
            options={
                'verbose_name': 'Species Hair Color',
                'verbose_name_plural': 'Species Hair Colors',
                'db_table': 'relation_species_hair_colors',
                'ordering': ['species__name', 'hair_color__color'],
                'unique_together': {('species', 'hair_color')},
            },
        ),
        migrations.CreateModel(
            name='SpeciesSkinColors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('skin_color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skin_color_species', to='api.skincolors')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species_skin_colors', to='api.species')),
            ],
            options={
                'verbose_name': 'Species Skin Color',
                'verbose_name_plural': 'Species Skin Colors',
                'db_table': 'relation_species_skin_colors',
                'ordering': ['species__name', 'skin_color__color'],
                'unique_together': {('species', 'skin_color')},
            },
        ),
        migrations.CreateModel(
            name='StarshipPilots',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('pilot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='piloted_starships', to='api.people')),
                ('starship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starship_pilots', to='api.starships')),
            ],
            options={
                'verbose_name': 'Starship Pilot',
                'verbose_name_plural': 'Starship Pilots',
                'db_table': 'relation_starship_pilots',
                'ordering': ['starship__name', 'pilot__name'],
                'unique_together': {('starship', 'pilot')},
            },
        ),
        migrations.CreateModel(
            name='StarshipManufacturerRelations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manufacturer_starships', to='api.starshipmanufacturers')),
                ('starship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starship_manufacturers', to='api.starships')),
            ],
            options={
                'verbose_name': 'Starship Manufacturer',
                'verbose_name_plural': 'Starship Manufacturers',
                'db_table': 'relation_starship_manufacturers',
                'ordering': ['starship__name', 'manufacturer__name'],
                'unique_together': {('starship', 'manufacturer')},
            },
        ),
        migrations.CreateModel(
            name='StarshipFilms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_starships', to='api.films')),
                ('starship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starship_films', to='api.starships')),
            ],
            options={
                'verbose_name': 'Starship Film',
                'verbose_name_plural': 'Starship Films',
                'db_table': 'relation_starship_films',
                'ordering': ['film__episode_id', 'starship__name'],
                'unique_together': {('starship', 'film')},
            },
        ),
        migrations.CreateModel(
            name='VehiclePilots',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('pilot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='piloted_vehicles', to='api.people')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle_pilots', to='api.vehicles')),
            ],
            options={
                'verbose_name': 'Vehicle Pilot',
                'verbose_name_plural': 'Vehicle Pilots',
                'db_table': 'relation_vehicle_pilots',
                'ordering': ['vehicle__name', 'pilot__name'],
                'unique_together': {('vehicle', 'pilot')},
            },
        ),
        migrations.CreateModel(
            name='VehicleManufacturerRelations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manufacturer_vehicles', to='api.vehiclemanufacturers')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle_manufacturers', to='api.vehicles')),
            ],
            options={
                'verbose_name': 'Vehicle Manufacturer',
                'verbose_name_plural': 'Vehicle Manufacturers',
                'db_table': 'relation_vehicle_manufacturers',
                'ordering': ['vehicle__name', 'manufacturer__name'],
                'unique_together': {('vehicle', 'manufacturer')},
            },
        ),
        migrations.CreateModel(
            name='VehicleFilms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_comment='The ISO 8601 date format of the time that this resource was created.', help_text='The ISO 8601 date format of the time that this resource was created.')),
                ('edited', models.DateTimeField(auto_now=True, db_comment='The ISO 8601 date format of the time that this resource was edited.', help_text='The ISO 8601 date format of the time that this resource was edited.')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='film_vehicles', to='api.films')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle_films', to='api.vehicles')),
            ],
            options={
                'verbose_name': 'Vehicle Film',
                'verbose_name_plural': 'Vehicle Films',
                'db_table': 'relation_vehicle_films',
                'ordering': ['film__episode_id', 'vehicle__name'],
                'unique_together': {('vehicle', 'film')},
            },
        ),
    ]
